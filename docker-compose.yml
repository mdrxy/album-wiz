services:
  frontend:
    build:
      context: ./frontend # The local path to the frontend source code
    container_name: vinyl-frontend
    volumes:
      - ./frontend:/app # Mounts the local frontend directory into the container for development (real-time changes)
    environment:
      # Variables that can be accessed in the frontend application
      - REACT_APP_API_BASE_URL
      - CHOKIDAR_USEPOLLING
    env_file:
      - .env
    networks:
      - vinyl-network # Putting all services in the same network for inter-container communication

  backend:
    build:
      context: ./backend
    container_name: vinyl-backend
    volumes:
      - ./backend:/app
      - ./media:/media # Shared volume for album art and other media files
    environment:
      - DATABASE_URL
      - REDIS_URL
      - MEDIA_DIR=/media # Environment variable for the media directory path
    env_file:
      - .env
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    depends_on:
      database:
        # Ensure the database container starts before the backend
        condition: service_healthy
      cache:
        condition: service_healthy # Ensure the Redis cache container starts before the backend
    networks:
      - vinyl-network

  database:
    image: postgres:15
    container_name: vinyl-database
    build:
      context: ./database
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persistent storage for the database data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql # Initialize the database with a custom SQL script
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: vinyl_db
    env_file:
      - .env
    networks:
      - vinyl-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    env_file:
      - .env
    volumes:
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro # Mount the pre-configured servers.json file
    depends_on:
      database:
        # Ensure the database container starts before pgAdmin
        condition: service_healthy
    networks:
      - vinyl-network

  cache:
    image: redis:7
    container_name: vinyl-cache
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data
    networks:
      - vinyl-network

  vector-search:
    build:
      context: ./vector-search
    container_name: vinyl-vector-search
    volumes:
      - ./media:/media # Shared volume for accessing media files during vector processing
    environment:
      - DATABASE_URL
    env_file:
      - .env
    depends_on:
      - database # FYI - doesn't guarantee that the database is ready
    networks:
      - vinyl-network

  nginx:
    image: nginx:latest # Use the official Nginx image.
    container_name: vinyl-nginx
    ports:
      - "80:80" # Default (http) web port
    volumes:
      - ./frontend/build:/usr/share/nginx/html:ro # Mount the build folder
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro # Bind mount the config file. 'ro' ensures read-only access meaning the container can't modify the file on the host
      - ./nginx/favicon.ico:/etc/nginx/favicon.ico:ro # Bind mount the favicon
    depends_on:
      - frontend
      - backend
    networks:
      - vinyl-network

volumes:
  postgres_data: # Define a persistent volume for the PostgreSQL database (to outlive container restarts)
  redis_data: # Persistent volume for the Redis cache
  media: # Shared volume for storing album art
    driver: local

networks:
  vinyl-network:
    # Define a custom network for inter-container communication
    driver: bridge # Use the bridge network driver for isolation
